# Spatial data manipulation and visualisation


This Chapter aims to demonstrate how we can manipulate, wrangle and visualise spatial data in R. 

:::: column-margin
::: callout-note
Create the habit of running the code below at the start of each R session. It will ensure you do not have leftovers from previous sessions, potentially leading to mistakes.

`#clean environment`
`rm(list=ls())`
:::
::::

## Dependencies

We ensure to load the libraries below. A core area of this session is learning to work with spatial data in R. R offers an ecosystem of purposely designed packages for manipulation and visualisation of spatial data and spatial analysis techniques. These ecosystem is known a [r-spatial](https://r-spatial.org). Various packages exist in [CRAN (The Comprehensive R Archive Network)](https://cran.r-project.org), including **sf** [@sf2018; @R-sf], **stars** [@R-stars], **terra**, **s2** [@R-s2], **lwgeom** [@R-lwgeom], **gstat** [@pebesma2004; @R-gstat], **spdep** [@R-spdep], **spatialreg** [@R-spatialreg], **spatstat** [@baddeley2015spatial; @R-spatstat], **tmap** [@tmap2018; @R-tmap], **mapview** [@R-mapview] and more. A key package is this ecosystem is **sf** [@pebesma2023spatial]. R package **sf** provides a table format for simple features, where feature geometries are stored in a list-column. It appears in 2016 and was developed to move spatial data analysis in R closer to standards-based approaches seen in the industry and open source projects, to build upon more modern versions of open source geospatial software stack and allow for integration of R spatial software with the **tidyverse** [@tidyverse2019], particularly **ggplot2**, **dplyr**, and **tidyr**. In this course, we will heavily use `sf`.

```{r}
#| warning: false
#| message: false

# data wrangling
library(tidyverse)

# spatial data wrangling
library(sf)
library(sp) 

# data visualisation
library(viridis) 
library(RColorBrewer) 

# format data visualisations
library(ggthemes)
library(patchwork)
library(showtext)
library(scales)

# create maps
library(leaflet)
library(tmap)
library(mapdeck)
```

## Data

Here we read all the data needed for the analysis. We use two types of data: (1) human mobility and population derived from Meta-Facebook users; and, (2) administative boundary data for Chile.

### Meta-Facebook mobility data

We use origin-destination mobility flow data between Provinces in Chile. We use data for April 2020. For a detailed description of the Meta-Facebook mobility data, please see the Chapter [Datasets](). We start by reading the data. We filter only flows occurring within the boundaries of Chile. The dataset contains daily flow counts between provinces that occurred in April 2020 during three windows of time during the day; that is, between 12am, 8am and 4pm.

We have a look at the data frame. We can see that the data contains 20 columns and 29,491 origin-destination interactions capturing counts of movements between provinces.

```{r}
# read
df20 <- readRDS("./data/fb/movement_adm/2020_04.rds") %>% 
  dplyr::filter(country == "CL")
glimpse(df20)
```

We can identify the list of origin and destination provinces for which we can observe movement.

```{r}
unique_origins <- unique(df20$start_polygon_name)
unique_destinations <- unique(df20$end_polygon_name)
```

### Meta-Facebook active users population

We will also use information on the number of Meta-Facebook active users population. The population Meta-Facebook active users can vary over time reflecting their varying patterns of usage and internet accessibility.

```{r}
# read and select observations
pop20_df <- readRDS("./data/fb/population_adm/2020_04.rds") %>% 
  dplyr::filter(country == "CL")

# identify polygons
unique_areas <- unique(pop20_df$polygon_name)

# data overview
glimpse(pop20_df)
```
### Administrative areas

We now read the boundaries for Chilean provinces. Provinces are the second administrative level in the country. Provinces are amalgamations of municipalities or comunes, and groupings of provinces are known as regions. Chile is organised around 15 regions, *54 provinces* and 346 municipalities - see [here](https://www.subdere.gov.cl/sites/default/files/documentos/articles-73111_recurso_1.pdf).

Let's stop here and understand the spatial data frame or **sf** object we are reading. We can see it has 56 features (i.e. rows) and 5 fields (columns) within a bounding box which defines the area we can visualise on a map. You can see how the map of provinces below seems off to the right. That is because the bounding box has been set to include Chilean islands off of the coast of the country on the Pacific ocean. We will work on adjusting this at a later point in this session.

The line *CRS* or Coordinate Reference Systems identifies the projection system currently attached to the data. This would be the CRS that will be used if we decided to map the data. The component is incredible important if you intend to combine information from two spatial data frames. Ensure they are on the same CRS! A good idea is to used planar projection systems. @lovelace2019geocomputation provide a good discussion on the various projection systems.

```{r}
#| warning: false
shp_pro <- read_sf("./data/shp/adm/province/PROVINCIAS_2020.shp") %>% 
  st_simplify(preserveTopology =T,
              dTolerance = 1000) %>%  # 1km
  sf::st_make_valid() 
shp_pro
```

```{r}
#| echo: false
ggplot(data = shp_pro) + 
  geom_sf(color = "gray60", 
          size = 0.1) +
  theme_void() +
  ggtitle('Provinces')
```

We will also use the regional boundaries for visualisation purposes. For now, we will just read them.

```{r}
#| warning: false
shp_reg <- read_sf("./data/shp/adm/region/REGIONES_2020.shp") %>% 
  st_simplify(preserveTopology =T,
              dTolerance = 1000) %>%  # 1km
  sf::st_make_valid() 
```

